datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Airman {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  hashedPassword      String?          @default("fe930258f2ca234018a1302dea5c3130e07890a6f25a76abb2606af1cea4b2ab")
  salt                String?          @default("330e567be2cd8b3eb9599af11b7880f8")
  rank                String?
  firstName           String?
  middleName          String?
  lastName            String?
  organization        String?
  officeSymbol        String?
  dodId               String?
  afsc                String?
  status              Status?          @default(Current)
  resetToken          String?
  resetTokenExpiresAt DateTime?
  supervisorId        Int?
  supervisor          Airman?          @relation("SupervisorAirman", fields: [supervisorId], references: [id])
  airmen              Airman[]         @relation("SupervisorAirman")
  roles               Role             @default(Airman)
  assignedTrainings   AirmanTraining[]
  certificates        Certificate[]
  notifications       Notification[]
}

model Training {
  id             Int                  @id @default(autoincrement())
  name           String               @unique
  description    String?
  link           String?
  duration       Int?
  createdAt      DateTime?            @default(now()) @db.Timestamptz(3)
  createdBy      String?
  deletedAt      DateTime?            @db.Timestamptz(3)
  deletedBy      String?
  editedAt       DateTime?            @updatedAt @db.Timestamptz(3)
  editedBy       String?
  collections    TrainingCollection[]
  assignedAirmen AirmanTraining[]
  certificates   Certificate[]
}

model Collection {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  createdAt   DateTime?            @default(now()) @db.Timestamptz(3)
  createdBy   String?
  deletedAt   DateTime?            @db.Timestamptz(3)
  deletedBy   String?
  editedAt    DateTime?            @updatedAt @db.Timestamptz(3)
  editedBy    String?
  trainings   TrainingCollection[]
}

model Certificate {
  id         Int      @id @default(autoincrement())
  airman     Airman   @relation(fields: [airmanId], references: [id])
  airmanId   Int
  training   Training @relation(fields: [trainingId], references: [id])
  trainingId Int
  url        String
  completion DateTime @db.Timestamptz(3)
  validated  Boolean? @default(false)
}

model AirmanTraining {
  id         Int       @id @default(autoincrement())
  airman     Airman    @relation(fields: [airmanId], references: [id])
  airmanId   Int
  training   Training  @relation(fields: [trainingId], references: [id])
  trainingId Int
  status     Status?   @default(Due)
  start      DateTime?
  end        DateTime?
  approval   Boolean   @default(false)

  @@unique([airmanId, trainingId])
}

model TrainingCollection {
  id           Int        @id @default(autoincrement())
  training     Training   @relation(fields: [trainingId], references: [id])
  trainingId   Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  @@unique([trainingId, collectionId])
}

enum Role {
  Airman
  Admin
  Monitor
  Supervisor
}

enum Status {
  Current
  Due
  Overdue
}

model Notification {
  id        Int      @id @default(autoincrement())
  airmanId  Int
  airman    Airman   @relation(fields: [airmanId], references: [id])
  message   String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}
